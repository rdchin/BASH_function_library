#!/bin/bash
#
# ©2020 Copyright 2020 Robert D. Chin
#
# Usage: bash example.sh
#        (not sh example.sh)
#
# +--------------------------------------------------------------------------+
# |                                                                          |
# |                 Customize Menu choice options below.                     |
# |                                                                          |
# +--------------------------------------------------------------------------+
#
# Format: <#@@> <Menu Option> <#@@> <Description of Menu Option> <#@@> <Corresponding function or action or cammand>
#
#@@Exit#@@Exit to command-line prompt.#@@break
#
#@@Do stuff#@@Script to do stuff.#@@f_do_stuff^$GUI
#
#@@About#@@Version information of this script.#@@f_about^$GUI
#
#@@Code History#@@Display code change history of this script.#@@f_code_history^$GUI
#
#@@Version Update#@@Check for updates to this script and download.#@@f_check_version^$GUI
#
#@@Help#@@Display help message.#@@f_help_message^$GUI
#
# +----------------------------------------+
# |        Default Variable Values         |
# +----------------------------------------+
#
VERSION="2020-12-11 00:14"
#
# +----------------------------------------+
# |           Function f_do_stuff          |
# +----------------------------------------+
#
#     Rev: 2020-12-11
#  Inputs: $1=GUI - "text", "dialog" or "whiptail" the preferred user-interface.
#    Uses: TEMP_FILE.
# Outputs: None.
#
f_do_stuff () {
      # man dialog --colors
      # Interpret embedded "\Z" sequences in the Dialog text by the following
      # character, which tells Dialog to set colors or video attributes:
      # •   0 through 7 are the ANSI color numbers used in curses: black, red, green,
      #     yellow, blue, magenta, cyan and white respectively.
      # •   Bold is set by 'b', reset by 'B'.
      # •   Reverse is set by 'r', reset by 'R'.
      # •   Underline is set by 'u', reset by 'U'.
      # •   The settings are cumulative, e.g., "\Zb\Z1" makes the following text bold
      #     (perhaps bright) red.
      # •   Restore normal settings with "\Zn".
      #
      # BASH commands to change the color of characters in a terminal.
      # bold    "$(tput bold)"
      # black   "$(tput setaf 0)"
      # red     "$(tput setaf 1)"
      # green   "$(tput setaf 2)"
      # yellow  "$(tput setaf 3)"
      # blue    "$(tput setaf 4)"
      # magenta "$(tput setaf 5)"
      # cyan    "$(tput setaf 6)"
      # white   "$(tput setaf 7)"
      # reset   "$(tput sgr0)"
      #
TEMP_FILE=$THIS_FILE"_temp.txt"
f_message $1 "NOK" "0. Start tests" "Starting tests now..."
# Test 1
f_message $1 "OK" "1. String in quotes, expect msgbox-ok" "This is a test of a \Z6software BASH script.\Zn\nI hope it works!"
#
# Test 2
echo "This is the Captain speaking, \"All hands stand-down from Red Alert.\"" >$TEMP_FILE
echo "Stand-by to receive guests..." >>$TEMP_FILE
f_message $1 "OK" "2. Text file, Expect textbox-ok" $TEMP_FILE
#
# Test 3
echo "This is the Captain speaking, \"All hands stand-by for shore leave.\"" >$TEMP_FILE
echo "Stand-by main martinis..." >>$TEMP_FILE
f_message $1 "NOK" "3. Text file, Expect textbox-nok" $TEMP_FILE
#
# Test 4 - The quotes around "$STRING" are required.
STRING=$(echo "This is the Captain speaking, \"All hands to \Z1\ZbRED Alert!\Zn This is not a drill!\"")
f_message $1 "OK" "4. String in var, expect msgbox-ok" "$STRING"
#
# Test 5
f_message $1 "OK" "5. String in quotes, expect msgbox-ok" "This is the Captain speaking, \"All hands to \Z1\ZbRED Alert!\Zn This is not a drill!\""
#
# Test 6
STRING=$(echo "This is the Captain speaking, \"All hands to \Z4\ZbCode Blue!\Zn This is not a drill!\"")
f_message $1 "NOK" "6. String in var, expect infobox-nok" "$STRING"
#
# Test 7
f_message $1 "NOK" "7. String in quotes, expect infobox-nok" "This is the Captain speaking, \"All hands to \Z5\ZbCode Magenta!\Zn This is not a drill!\""
#
} # End of function f_do_stuff.
#
# +----------------------------------------+
# |        Function f_check_version        |
# +----------------------------------------+
#
#     Rev: 2020-09-15
#  Inputs: $1=GUI - "dialog" or "whiptail" The CLI GUI application in use.
#    Uses: SERVER_DIR, MP_DIR, TARGET_DIR, TARGET_FILE, VERSION, TEMP_FILE, ERROR.
# Outputs: $1=GUI.
#          $2=Samba File server Directory
#          $3=Local Mount Point (Directory)
#          $4=File server Target Directory.
#          $5=File server File Name to compare.
#          $6=Version of file to compare. String$
#          $7=Temporary file name with list of files to be upgraded.
#          ERROR
#
# PLEASE NOTE: RENAME THIS FUNCTION WITHOUT SUFFIX "_TEMPLATE" AND COPY
#              THIS FUNCTION INTO ANY SCRIPT WHICH DEPENDS ON THE
#              LIBRARY FILE "common_bash_function.lib".
#
# Synopsis: Check version $6 of $5 local file with version of repository file.
#           If the repository file has latest version, then copy all 
#           dependent files and libraries from the repository to local PC. 
#
f_check_version () {
      #
      #=================================================================
      # EDIT THE LINES BELOW TO DEFINE THE LAN FILE SERVER DIRECTORY AND
      # SHARED MOUNTPOINT DIRECTORY, LOCAL TARGET DIRECTORY AND FILE. 
      #=================================================================
      #
      # LAN File Server shared directory.
      SERVER_DIR="//scotty/files"
      #
      # Local PC mount-point directory.
      MP_DIR="/mnt/scotty/files"
      #
      # Local PC target directory, sub-directory below mount-point directory.
      TARGET_DIR="/mnt/scotty/files/LIBRARY/PC-stuff/PC-software/BASH_Scripting_Projects/Repository"
      #
      # Local PC file within TARGET_DIR.
      FILE_TO_COMPARE="example.sh"
      #
      # Version of TARGET_FILE.
      VERSION=$(grep --max-count=1 "VERSION" $FILE_TO_COMPARE)
      #
      FILE_LIST=$THIS_DIR/$THIS_FILE"_file_temp.txt"
      ERROR=0
      #
      #=================================================================
      # EDIT THE LINES BELOW TO SPECIFY THE FILE NAMES TO UPDATE.
      # FILE NAMES INCLUDE ALL DEPENDENT SCRIPTS LIBRARIES.
      #=================================================================
      #
      # Create list of files to update and write to temporary file, FILE_LIST.
      #
      echo "example.sh"           > $FILE_LIST  # <<<--- INSERT ACTUAL FILE NAME HERE.
      echo "example_library.lib" >> $FILE_LIST  # <<<--- INSERT ACTUAL FILE NAME HERE.
      #
      f_version_compare $1 $SERVER_DIR $MP_DIR $TARGET_DIR $FILE_TO_COMPARE "$VERSION" $FILE_LIST
      #
      if [ -r  $FILE_LIST ] ; then
         rm  $FILE_LIST
      fi
      #
}  # End of function f_check_version.
#
