#!/bin/bash
#
# ©2021 Copyright 2021 Robert D. Chin
# Email: RDevChin@Gmail.com
#
# Usage: source example.lib
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# +--------------------------------------------------------------------------+
# |                                                                          |
# |                 Customize Menu choice options below.                     |
# |                                                                          |
# +--------------------------------------------------------------------------+
#
# Format: <#@@> <Menu Option> <#@@> <Description of Menu Option> <#@@> <Corresponding function or action or cammand>
#
#@@Exit#@@Exit this menu.#@@break
#
#@@Do stuff#@@Script to do stuff.#@@f_do_stuff^$GUI
#
#@@About#@@Version information of this script.#@@f_about^$GUI
#
#@@Code History#@@Display code change history of this script.#@@f_code_history^$GUI
#
#@@Version Update#@@Check for updates to this script and download.#@@f_check_version^$GUI
#
#@@Help#@@Display help message.#@@f_help_message^$GUI
#
# +----------------------------------------+
# |        Default Variable Values         |
# +----------------------------------------+
#
VERSION="2021-02-25 23:32"
#
# Commented out THIS_FILE since it will conflict other scripts which
# use this library.
#THIS_FILE="$0"
#
# +----------------------------------------+
# |            Brief Description           |
# +----------------------------------------+
#
#& Brief Description
#&
#& Library of BASH functions, example.lib is a child dependency
#& used by the following scripts.
#&
#& Parent script: example.sh.
#&
#& See script example.sh for Edit History.
#&
#& Usage: source example.lib
#&
#&    This program is free software: you can redistribute it and/or modify
#&    it under the terms of the GNU General Public License as published by
#&    the Free Software Foundation, either version 3 of the License, or
#&    (at your option) any later version.
#&
#&
#&    This program is distributed in the hope that it will be useful,
#&    but WITHOUT ANY WARRANTY; without even the implied warranty of
#&    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#&    GNU General Public License for more details.
#&
#&    You should have received a copy of the GNU General Public License
#&    along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# +----------------------------------------+
# |           Code Change History          |
# +----------------------------------------+
#
## Code Change History
##
## (Please see script "example.sh" for Code History information.)
#
# +----------------------------------------+
# |        Function f_check_version        |
# +----------------------------------------+
#
#     Rev: 2021-02-08
#  Inputs: $1=GUI - "dialog" or "whiptail" The CLI GUI application in use.
#    Uses: SERVER_DIR, MP_DIR, TARGET_DIR, TARGET_FILE, VERSION, TEMP_FILE, ERROR.
# Outputs: $1=GUI.
#          $2=Samba File server Directory
#          $3=Local Mount Point (Directory)
#          $4=File server Target Directory.
#          $5=File server File Name to compare.
#          $6=Version of file to compare. String$
#          $7=Temporary file name with list of files to be upgraded.
#          ERROR
#
# PLEASE NOTE: RENAME THIS FUNCTION WITHOUT SUFFIX "_TEMPLATE" AND COPY
#              THIS FUNCTION INTO ANY SCRIPT WHICH DEPENDS ON THE
#              LIBRARY FILE "common_bash_function.lib".
#
# Synopsis: Check version $6 of $5 local file with version of repository file.
#           If the repository file has latest version, then copy all 
#           dependent files and libraries from the repository to local PC. 
#
f_check_version () {
      #
      #
      #=================================================================
      # EDIT THE LINES BELOW TO DEFINE THE LAN FILE SERVER DIRECTORY AND
      # SHARED MOUNTPOINT DIRECTORY, LOCAL TARGET DIRECTORY AND FILE. 
      #=================================================================
      #
      #
      # LAN File Server shared directory.
      SERVER_DIR="[FILE_SERVER_DIRECTORY_NAME_GOES_HERE]"
      #
      # Local PC mount-point directory.
      MP_DIR="[LOCAL_MOUNT-POINT_DIRECTORY_NAME_GOES_HERE]"
      #
      # Local PC mount-point with LAN File Server Local Repository full directory path.
      LOCAL_REPO_DIR="$MP_DIR/[DIRECTORY_PATH_TO_LOCAL_REPOSITORY]"
      #
      # Local PC file within TARGET_DIR.
      FILE_TO_COMPARE="[FILE_TO_COMPARE]"
      FILE_TO_COMPARE="example.sh"
      #
      # Version of TARGET_FILE.
      VERSION=$(grep --max-count=1 "VERSION" $FILE_TO_COMPARE)
      #
      FILE_LIST=$THIS_DIR/$THIS_FILE"_file_temp.txt"
      ERROR=0
      #
      #
      #=================================================================
      # EDIT THE LINES BELOW TO SPECIFY THE FILE NAMES TO UPDATE.
      # FILE NAMES INCLUDE ALL DEPENDENT SCRIPTS LIBRARIES.
      #=================================================================
      #
      #
      # Create list of files to update and write to temporary file, FILE_LIST.
      #
      echo "example.sh"                > $FILE_LIST  # <<<--- INSERT ACTUAL FILE NAME HERE.
      echo "example.lib"              >> $FILE_LIST  # <<<--- INSERT ACTUAL FILE NAME HERE.
      echo "common_bash_function.lib" >> $FILE_LIST  # <<<--- INSERT ACTUAL FILE NAME HERE.
      #
      f_version_compare $1 $SERVER_DIR $MP_DIR $LOCAL_REPO_DIR $FILE_TO_COMPARE "$VERSION" $FILE_LIST
      #
      if [ -r  $FILE_LIST ] ; then
         rm  $FILE_LIST
      fi
      #
}  # End of function f_check_version.
#
# +----------------------------------------+
# |           Function f_do_stuff          |
# +----------------------------------------+
#
#     Rev: 2020-05-23
#  Inputs: None
#    Uses: TEMP_FILE.
# Outputs: None.
#
f_do_stuff () {
      # man dialog --colors
      # Interpret embedded "\Z" sequences in the Dialog text by the following
      # character, which tells Dialog to set colors or video attributes:
      # •   0 through 7 are the ANSI color numbers used in curses: black, red, green,
      #     yellow, blue, magenta, cyan and white respectively.
      # •   Bold is set by 'b', reset by 'B'.
      # •   Reverse is set by 'r', reset by 'R'.
      # •   Underline is set by 'u', reset by 'U'.
      # •   The settings are cumulative, e.g., "\Zb\Z1" makes the following text bold
      #     (perhaps bright) red.
      # •   Restore normal settings with "\Zn".
      #
      # BASH commands to change the color of characters in a terminal.
      # bold    "$(tput bold)"
      # black   "$(tput setaf 0)"
      # red     "$(tput setaf 1)"
      # green   "$(tput setaf 2)"
      # yellow  "$(tput setaf 3)"
      # blue    "$(tput setaf 4)"
      # magenta "$(tput setaf 5)"
      # cyan    "$(tput setaf 6)"
      # white   "$(tput setaf 7)"
      # reset   "$(tput sgr0)"
      #
TEMP_FILE=$THIS_FILE"_temp.txt"
f_message $GUI "NOK" "0. Start tests" "Starting tests now..."
# Test 1
f_message $GUI "OK" "1. String in quotes, expect msgbox-ok" "This is a test of a \Z6software BASH script.\Zn\nI hope it works!"
#
# Test 2
echo "This is the Captain speaking, \"All hands stand-down from Red Alert.\"" >$TEMP_FILE
echo "Stand-by to receive guests..." >>$TEMP_FILE
f_message $GUI "OK" "2. Text file, Expect textbox-ok" $TEMP_FILE
#
# Test 3
echo "This is the Captain speaking, \"All hands stand-by for shore leave.\"" >$TEMP_FILE
echo "Stand-by main martinis..." >>$TEMP_FILE
f_message $GUI "NOK" "3. Text file, Expect textbox-nok" $TEMP_FILE
#
# Test 4 - The quotes around "$STRING" are required.
STRING=$(echo "This is the Captain speaking, \"All hands to \Z1\ZbRED Alert!\Zn This is not a drill!\"")
f_message $GUI "OK" "4. String in var, expect msgbox-ok" "$STRING"
#
# Test 5
f_message $GUI "OK" "5. String in quotes, expect msgbox-ok" "This is the Captain speaking, \"All hands to \Z1\ZbRED Alert!\Zn This is not a drill!\""
#
# Test 6
STRING=$(echo "This is the Captain speaking, \"All hands to \Z4\ZbCode Blue!\Zn This is not a drill!\"")
f_message $GUI "NOK" "6. String in var, expect infobox-nok" "$STRING"
#
# Test 7
f_message $GUI "NOK" "7. String in quotes, expect infobox-nok" "This is the Captain speaking, \"All hands to \Z5\ZbCode Magenta!\Zn This is not a drill!\""
#
} # End of function f_do_stuff.
#
